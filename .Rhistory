}
### Get All players in that position on this team
Player_Points = subset(T1, T1$Player == as.character(Results[each, "Name"])  )
NonPlayer_Points = subset(T1, T1$Player != as.character(Results[each, "Name"]))
### Remove  Starters who have flexible position
if (Results[each, "ActualPos"] != "0"){
playes_NotFound = unique(NonPlayer_Points$Player)
for(each2 in 1:length(playes_NotFound)){
C =  which(Results$Name == as.character(playes_NotFound[each2]) )
if ( length(C) > 0 ) {
if (Results[C,"ActualPos"] != "0" ){
NonPlayer_Points = subset(NonPlayer_Points, NonPlayer_Points$Player != as.character(Results[C, "Name"]))
}
}
}
}
Results[each,"Player_Per"] = sum((Player_Points$`Act Pts`)) / ( sum((Player_Points$`Act Pts`)) + sum((NonPlayer_Points$`Act Pts`)) )
Results[each,"Player_Med"] = median(Player_Points$`Act Pts`)
Results[each,"Player_Projected"] =  Results[each, "L5"] * Results[each,"Player_Per"]
}
write.csv(Results, file = "NBA_Test_v11_4_17.csv")
View(All_17)
All_16 = read.csv('All_NBA_16.csv', header = FALSE)
colnames(All_16) = c("Date","B1","B2","Rating","Player","Pos","Salary","Min","Max","Team",
"Opp","Proj","Ceiling","Floor","Proj_Plus_Minus","Pts_Sal","Usg Proj","Min Proj",
"Own1","Own2","Imp Pts","Act Pts","FP_Min","PER",
"Usage","Pro","My","Bargain","Opp_Plus_Minus","PaceD","Refs","Ref1","Ref2","TS_Per","Fouls_36",
"Points_Touch","Touches","B2B","Rest","Pts","Opp Pts","delta","Spread",
"O_U","Spread_per","PPG","Change","Consistency",
"Upside","Duds","Count","YPPG","YPlus_Minus","YChange","YConsistency","YUpside","YDuds","YCount")
All_16[All_16 == '&nbsp;'] <- 0
All_16["B5"] = 0
All_16["S_B"] = 0
All_16["PF_Min-M"] = 0
All_17 = read.csv('All_NBA_17.csv', header = FALSE)
colnames(All_17) = c("Date","B1","B2","Rating","Player","Pos","Salary","Min","Max","Team",
"Opp","Proj","Ceiling","Floor","Proj_Plus_Minus","Pts_Sal","Usg Proj","Min Proj",
"Own1","Own2","Imp Pts","Act Pts","FP_Min","PF_Min-M","PER",
"Usage","Pro","My","Bargain","Opp_Plus_Minus","PaceD","Refs","TS_Per","Fouls_36",
"Points_Touch","Touches","S_B","B2B","Rest","Pts","Opp Pts","delta","Spread",
"O_U","Spread_per","PPG","Change","Consistency",
"Upside","Duds","Count","YPPG","YPlus_Minus","YChange","YConsistency","YUpside","YDuds","YCount","B5")
All_17[All_17 == '&nbsp;'] <- 0
All_17["Ref1"] = 0
All_17["Ref2"] = 0
All_16 = rbind(All_16, All_17)
Position = read.csv('Position.csv', header = FALSE)
colnames(Position) = c("Pos","PName")
Dvoa = read.csv('DVOA.csv',header= FALSE)
colnames(Dvoa) = c("TeamName","TNShort","Pos","season","L5","L10","Pts","Reb","Ast","Stl","Blk","3pm","FG","FT","TO","Rank")
Position[] <- lapply(Position, as.character)
#### Because there are naming differences make everything uniform
for(each in 1:nrow(Position)){
N  = amatch(as.character(Position[each,"PName"] ), All_16$Player , maxDist = 5)
i = 0
while(is.na(N)){
N  = amatch(as.character(Position[each,"PName"] ), All_16$Player , maxDist = (5 + i))
i = i + 1
if (i > 10){
break
}
}
if(i < 10)
{
Position[each,"PName"] =  as.character(All_16[N,"Player"])
}
}
Position = data.frame(Position)
# All_17 = read.csv('All_NBA_Current.csv')
#
# colnames(All_17) = c("Date","B1","B2","Rating","Player","Pos","Salary","Min","Max","Team",
#                      "Opp","Proj","Ceiling","Floor","Proj_Plus_Minus","Pts_Sal","Usg Proj","Min Proj",
#                      "Own1","Own2","Imp Pts","FP_Min","PER",
#                      "Usage","Pro","My","Bargain","Opp_Plus_Minus","PaceD","Refs","Ref1","Ref2","TS_Per","Fouls_36",
#                      "Points_Touch","Touches","B2B","Rest","Pts","Opp Pts","delta","Spread",
#                      "O_U","Spread_per","PPG","Change","Consistency",
#                      "Upside","Duds","Count","YPPG","YPlus_Minus","YChange","YConsistency","YUpside","YDuds","YCount")
# All_17[All_17 == '&nbsp;'] <- 0
#
# All_17[,c("Act Pts")] = 0
#
# # All_16[,c("B5")] = 0
# All_16 = rbind(All_16, All_17)
###########################################################
All_16[is.null(All_16)] = 0
All_16[is.na(All_16)] = 0
All_16$Salary = as.numeric(gsub('[$,]', '', All_16$Salary))
All_16$Bargain =as.numeric(gsub('[%,]', '', All_16$Bargain))
All_16$Consistency =as.numeric(gsub('[%,]', '', All_16$Consistency))
All_16$Duds  =as.numeric(gsub('[%,]', '', All_16$Duds))
All_16$Count =as.numeric(gsub('[%,]', '', All_16$Count))
All_16$Upside =as.numeric(gsub('[%,]', '', All_16$Upside))
All_16$Opp =(gsub('[@,]', '', All_16$Opp))
All_16$YConsistency =as.numeric(gsub('[%,]', '', All_16$YConsistency))
All_16$YDuds  =as.numeric(gsub('[%,]', '', All_16$YDuds))
All_16$YCount =as.numeric(gsub('[%,]', '', All_16$YCount))
All_16$YUpside =as.numeric(gsub('[%,]', '', All_16$YUpside))
All_16[is.na(All_16)] = 0
All_16[is.null(All_16)] = 0
##################### Spearman rank correlation ###########################
spearmanP = varclus(as.matrix(All_16[,c(
"Rating","Salary","Proj","Ceiling","Floor","Proj_Plus_Minus","Pts_Sal","Usg Proj","Min Proj",
"Own1","Own2","Imp Pts","Act Pts","FP_Min","PER",
"Usage","Pro","Bargain","Opp_Plus_Minus","PaceD","TS_Per","Fouls_36",
"Points_Touch","Touches","Rest","Pts","Opp Pts","delta","Spread",
"O_U","Spread_per","PPG","Consistency",
"Upside","Duds","Count","YPPG","YPlus_Minus","YConsistency","YUpside","YDuds","YCount"
)]),
similarity = "spearman")
Data_Cleaned = All_16[,c("Date","Rating","Player","Pos","Salary","Min","Max","Team","Opp",
"Rating","Ceiling","Pts_Sal","Usg Proj","Min Proj",
"Own1","Act Pts","PER",
"Usage","Pro","Bargain","Opp_Plus_Minus","PaceD","TS_Per","Fouls_36",
"Points_Touch","Touches","Rest","Pts","Opp Pts","delta","Spread",
"O_U","Spread_per",
"Upside","Duds","Count","YPlus_Minus","YDuds","YCount" )]
Data_Cleaned_Test = subset(Data_Cleaned, Data_Cleaned$Date == "11/4/2017")
Data_Cleaned_Train = subset(Data_Cleaned, Data_Cleaned$Date != "11/4/2017")
playerNames = unique(Data_Cleaned_Test$Player)
Results = data.frame( RFPred = numeric(), Xgb = numeric(), Name = factor(), Pos = factor() ,
Salary = numeric(), Actual = numeric() , HTeam = factor(), OTeam = factor(),
Pts = numeric(), DNNPer = numeric(), DNN = numeric() )
for (each in 1:length(playerNames)){
Data_Cleaned_Test = subset(Data_Cleaned, Data_Cleaned$Date == "11/4/2017"
& Data_Cleaned$Player == as.character(playerNames[each]) )
Data_Cleaned_Train = subset(Data_Cleaned, Data_Cleaned$Date != "11/4/2017"
& Data_Cleaned$Player == as.character(playerNames[each]) )
print (playerNames[each])
if (nrow(Data_Cleaned_Test) < 1 ){
next
}
if (nrow(Data_Cleaned_Train) < 15){
Data_Cleaned_Train = subset(Data_Cleaned, Data_Cleaned$Date != "11/4/2017"
& Data_Cleaned$Team
== as.character( unique ( subset(Data_Cleaned, Data_Cleaned$Player == as.character(playerNames[each]) )$Team ) )
)
}
if (nrow(Data_Cleaned_Train) < 15){
next
}
if (playerNames[each] == "Kay Felder" & playerNames[each] == "Ian Mahinmi" & playerNames[each] == "Jodie Meeks"){
next
}
rf = randomForest( Data_Cleaned_Train[,c(  "Rating","Ceiling","Pts_Sal","Usg Proj","Min Proj",
"Own1","PER",
"Usage","Pro","Bargain","Opp_Plus_Minus","PaceD","TS_Per","Fouls_36",
"Points_Touch","Touches","Rest","Pts","Opp Pts","delta","Spread",
"O_U","Spread_per",
"Upside","Duds","Count","YPlus_Minus","YDuds","YCount"  )],
y = Data_Cleaned_Train[,c("Act Pts")], ntree=100
,type='regression')
RFPred = predict( rf,  Data_Cleaned_Test[,c(  "Rating","Ceiling","Pts_Sal","Usg Proj","Min Proj",
"Own1","PER",
"Usage","Pro","Bargain","Opp_Plus_Minus","PaceD","TS_Per","Fouls_36",
"Points_Touch","Touches","Rest","Pts","Opp Pts","delta","Spread",
"O_U","Spread_per",
"Upside","Duds","Count","YPlus_Minus","YDuds","YCount" )]
,type = c("response") )
trainSparceMatrix = sparse.model.matrix( Data_Cleaned_Train$`Act Pts` ~
(Data_Cleaned_Train$Rating + Data_Cleaned_Train$Ceiling + Data_Cleaned_Train$`Usg Proj` + Data_Cleaned_Train$Pts_Sal
+ Data_Cleaned_Train$`Min Proj` + Data_Cleaned_Train$Pro + Data_Cleaned_Train$Bargain
+ Data_Cleaned_Train$Own1 + Data_Cleaned_Train$PER + Data_Cleaned_Train$Pts + Data_Cleaned_Train$Usage +
Data_Cleaned_Train$Opp_Plus_Minus + Data_Cleaned_Train$PaceD + Data_Cleaned_Train$TS_Per + Data_Cleaned_Train$Fouls_36 +
Data_Cleaned_Train$Points_Touch + Data_Cleaned_Train$Touches + Data_Cleaned_Train$Rest + Data_Cleaned_Train$Pts +
Data_Cleaned_Train$`Opp Pts` + Data_Cleaned_Train$delta + Data_Cleaned_Train$Spread + Data_Cleaned_Train$O_U +
Data_Cleaned_Train$Spread_per + Data_Cleaned_Train$Upside + Data_Cleaned_Train$Duds + Data_Cleaned_Train$Count +
Data_Cleaned_Train$YPlus_Minus + Data_Cleaned_Train$YDuds + Data_Cleaned_Train$YCount) )
testSparseMatrix = sparse.model.matrix(
Data_Cleaned_Test$`Act Pts` ~
(Data_Cleaned_Test$Rating + Data_Cleaned_Test$Ceiling + Data_Cleaned_Test$`Usg Proj` + Data_Cleaned_Test$Pts_Sal
+ Data_Cleaned_Test$`Min Proj` + Data_Cleaned_Test$Pro + Data_Cleaned_Test$Bargain
+ Data_Cleaned_Test$Own1 + Data_Cleaned_Test$PER + Data_Cleaned_Test$Pts + Data_Cleaned_Test$Usage +
Data_Cleaned_Test$Opp_Plus_Minus + Data_Cleaned_Test$PaceD + Data_Cleaned_Test$TS_Per + Data_Cleaned_Test$Fouls_36 +
Data_Cleaned_Test$Points_Touch + Data_Cleaned_Test$Touches + Data_Cleaned_Test$Rest + Data_Cleaned_Test$Pts +
Data_Cleaned_Test$`Opp Pts` + Data_Cleaned_Test$delta + Data_Cleaned_Test$Spread + Data_Cleaned_Test$O_U +
Data_Cleaned_Test$Spread_per + Data_Cleaned_Test$Upside + Data_Cleaned_Test$Duds + Data_Cleaned_Test$Count +
Data_Cleaned_Test$YPlus_Minus + Data_Cleaned_Test$YDuds + Data_Cleaned_Test$YCount
))
Labels = Matrix(Data_Cleaned_Train$`Act Pts`, sparse = TRUE)
dtrain <- xgb.DMatrix(data = trainSparceMatrix, label=Labels)
xgbO = xgboost(data = dtrain ,booster = "gblinear" , eta = 0.1 , max_depth=50, nthread = 4,
nrounds=2000,objective = "reg:linear" , verbose = 0 )
##################################
#### H20 ####
TrainingH20= as.h2o(Data_Cleaned_Train)
splits <- h2o.splitFrame(TrainingH20, c(0.9),  seed=1234)
trainDNN  <- h2o.assign(splits[[1]], "train.hex") # 60%
validDNN   <- h2o.assign(splits[[2]], "valid.hex") # 60%
# test$`X3P P` + test$`FT P` + test$`TRB P`
# + test$`STL P`  + test$`AST P` + test$`BLK P`
# + test$`TOV P` +
# TD2 = subset(test, test$playerId == "davisan02")
TrainingH202= as.h2o(Data_Cleaned_Test)
splits2 <- h2o.splitFrame(TrainingH202,  seed=0)
testDNN <- h2o.assign(splits2[[1]], "test.hex")  # 20%
response <- "Act Pts"
predictors <- c("Rating","Ceiling","Pts_Sal","Usg Proj","Min Proj",
"Own1","PER",
"Usage","Pro","Bargain","Opp_Plus_Minus","PaceD","TS_Per","Fouls_36",
"Points_Touch","Touches","Rest","Pts","Opp Pts","delta","Spread",
"O_U","Spread_per",
"Upside","Duds","Count","YPlus_Minus","YDuds","YCount")
m1 <- h2o.deeplearning(
model_id="dl_model_first",
training_frame=trainDNN,
validation_frame=validDNN,   ## validation dataset: used for scoring and early stopping
x=predictors,
y=response,
nfold = 5,
#activation="Rectifier",  ## default
hidden=c(300,300,200,100),       ## default: 2 hidden layers with 200 neurons each
variable_importances=T,
epochs = 5,
categorical_encoding = "OneHotInternal"
)
## not enabled by default
##################################
Prediction2 =  as.data.frame(RFPred)
Prediction2["RFPer"] = as.data.frame(  Prediction2["RFPred"]*100/(Data_Cleaned_Test$`Salary`) )
Prediction2["Actual"] =  as.data.frame(Data_Cleaned_Test$`Act Pts`)
Prediction2["Salary"] =  as.data.frame(Data_Cleaned_Test$`Salary`)
Prediction2["Name"] =  as.data.frame(Data_Cleaned_Test$Player)
Prediction2["HTeam"] =  as.data.frame(Data_Cleaned_Test$Team)
Prediction2["Opp"] = as.data.frame(Data_Cleaned_Test$Opp)
Prediction2["Pts"] =  as.data.frame(Data_Cleaned_Test$Pts)
Prediction2["Pos"] =  as.data.frame(Data_Cleaned_Test$Pos)
Prediction2["Xgb"] = as.data.frame(predict(xgbO, testSparseMatrix))
Prediction2["XgbPer"] = as.data.frame(  Prediction2["Xgb"]*100/(Data_Cleaned_Test$`Salary`) )
Prediction2["DNN"] = as.data.frame(h2o.predict(m1,newdata=testDNN))
Prediction2["DNNPer"] = as.data.frame(  Prediction2["DNN"]*100/(Data_Cleaned_Test$`Salary`) )
Results = rbind(Results, Prediction2)
}
h2o.shutdown()
localH2O <- h2o.init()
for (each in 53:length(playerNames)){
Data_Cleaned_Test = subset(Data_Cleaned, Data_Cleaned$Date == "11/4/2017"
& Data_Cleaned$Player == as.character(playerNames[each]) )
Data_Cleaned_Train = subset(Data_Cleaned, Data_Cleaned$Date != "11/4/2017"
& Data_Cleaned$Player == as.character(playerNames[each]) )
print (playerNames[each])
if (nrow(Data_Cleaned_Test) < 1 ){
next
}
if (nrow(Data_Cleaned_Train) < 15){
Data_Cleaned_Train = subset(Data_Cleaned, Data_Cleaned$Date != "11/4/2017"
& Data_Cleaned$Team
== as.character( unique ( subset(Data_Cleaned, Data_Cleaned$Player == as.character(playerNames[each]) )$Team ) )
)
}
if (nrow(Data_Cleaned_Train) < 15){
next
}
if (playerNames[each] == "Kay Felder" & playerNames[each] == "Ian Mahinmi" & playerNames[each] == "Jodie Meeks"){
next
}
rf = randomForest( Data_Cleaned_Train[,c(  "Rating","Ceiling","Pts_Sal","Usg Proj","Min Proj",
"Own1","PER",
"Usage","Pro","Bargain","Opp_Plus_Minus","PaceD","TS_Per","Fouls_36",
"Points_Touch","Touches","Rest","Pts","Opp Pts","delta","Spread",
"O_U","Spread_per",
"Upside","Duds","Count","YPlus_Minus","YDuds","YCount"  )],
y = Data_Cleaned_Train[,c("Act Pts")], ntree=100
,type='regression')
RFPred = predict( rf,  Data_Cleaned_Test[,c(  "Rating","Ceiling","Pts_Sal","Usg Proj","Min Proj",
"Own1","PER",
"Usage","Pro","Bargain","Opp_Plus_Minus","PaceD","TS_Per","Fouls_36",
"Points_Touch","Touches","Rest","Pts","Opp Pts","delta","Spread",
"O_U","Spread_per",
"Upside","Duds","Count","YPlus_Minus","YDuds","YCount" )]
,type = c("response") )
trainSparceMatrix = sparse.model.matrix( Data_Cleaned_Train$`Act Pts` ~
(Data_Cleaned_Train$Rating + Data_Cleaned_Train$Ceiling + Data_Cleaned_Train$`Usg Proj` + Data_Cleaned_Train$Pts_Sal
+ Data_Cleaned_Train$`Min Proj` + Data_Cleaned_Train$Pro + Data_Cleaned_Train$Bargain
+ Data_Cleaned_Train$Own1 + Data_Cleaned_Train$PER + Data_Cleaned_Train$Pts + Data_Cleaned_Train$Usage +
Data_Cleaned_Train$Opp_Plus_Minus + Data_Cleaned_Train$PaceD + Data_Cleaned_Train$TS_Per + Data_Cleaned_Train$Fouls_36 +
Data_Cleaned_Train$Points_Touch + Data_Cleaned_Train$Touches + Data_Cleaned_Train$Rest + Data_Cleaned_Train$Pts +
Data_Cleaned_Train$`Opp Pts` + Data_Cleaned_Train$delta + Data_Cleaned_Train$Spread + Data_Cleaned_Train$O_U +
Data_Cleaned_Train$Spread_per + Data_Cleaned_Train$Upside + Data_Cleaned_Train$Duds + Data_Cleaned_Train$Count +
Data_Cleaned_Train$YPlus_Minus + Data_Cleaned_Train$YDuds + Data_Cleaned_Train$YCount) )
testSparseMatrix = sparse.model.matrix(
Data_Cleaned_Test$`Act Pts` ~
(Data_Cleaned_Test$Rating + Data_Cleaned_Test$Ceiling + Data_Cleaned_Test$`Usg Proj` + Data_Cleaned_Test$Pts_Sal
+ Data_Cleaned_Test$`Min Proj` + Data_Cleaned_Test$Pro + Data_Cleaned_Test$Bargain
+ Data_Cleaned_Test$Own1 + Data_Cleaned_Test$PER + Data_Cleaned_Test$Pts + Data_Cleaned_Test$Usage +
Data_Cleaned_Test$Opp_Plus_Minus + Data_Cleaned_Test$PaceD + Data_Cleaned_Test$TS_Per + Data_Cleaned_Test$Fouls_36 +
Data_Cleaned_Test$Points_Touch + Data_Cleaned_Test$Touches + Data_Cleaned_Test$Rest + Data_Cleaned_Test$Pts +
Data_Cleaned_Test$`Opp Pts` + Data_Cleaned_Test$delta + Data_Cleaned_Test$Spread + Data_Cleaned_Test$O_U +
Data_Cleaned_Test$Spread_per + Data_Cleaned_Test$Upside + Data_Cleaned_Test$Duds + Data_Cleaned_Test$Count +
Data_Cleaned_Test$YPlus_Minus + Data_Cleaned_Test$YDuds + Data_Cleaned_Test$YCount
))
Labels = Matrix(Data_Cleaned_Train$`Act Pts`, sparse = TRUE)
dtrain <- xgb.DMatrix(data = trainSparceMatrix, label=Labels)
xgbO = xgboost(data = dtrain ,booster = "gblinear" , eta = 0.1 , max_depth=50, nthread = 4,
nrounds=2000,objective = "reg:linear" , verbose = 0 )
##################################
#### H20 ####
TrainingH20= as.h2o(Data_Cleaned_Train)
splits <- h2o.splitFrame(TrainingH20, c(0.9),  seed=1234)
trainDNN  <- h2o.assign(splits[[1]], "train.hex") # 60%
validDNN   <- h2o.assign(splits[[2]], "valid.hex") # 60%
# test$`X3P P` + test$`FT P` + test$`TRB P`
# + test$`STL P`  + test$`AST P` + test$`BLK P`
# + test$`TOV P` +
# TD2 = subset(test, test$playerId == "davisan02")
TrainingH202= as.h2o(Data_Cleaned_Test)
splits2 <- h2o.splitFrame(TrainingH202,  seed=0)
testDNN <- h2o.assign(splits2[[1]], "test.hex")  # 20%
response <- "Act Pts"
predictors <- c("Rating","Ceiling","Pts_Sal","Usg Proj","Min Proj",
"Own1","PER",
"Usage","Pro","Bargain","Opp_Plus_Minus","PaceD","TS_Per","Fouls_36",
"Points_Touch","Touches","Rest","Pts","Opp Pts","delta","Spread",
"O_U","Spread_per",
"Upside","Duds","Count","YPlus_Minus","YDuds","YCount")
m1 <- h2o.deeplearning(
model_id="dl_model_first",
training_frame=trainDNN,
validation_frame=validDNN,   ## validation dataset: used for scoring and early stopping
x=predictors,
y=response,
nfold = 5,
#activation="Rectifier",  ## default
hidden=c(300,300,200,100),       ## default: 2 hidden layers with 200 neurons each
variable_importances=T,
epochs = 5,
categorical_encoding = "OneHotInternal"
)
## not enabled by default
##################################
Prediction2 =  as.data.frame(RFPred)
Prediction2["RFPer"] = as.data.frame(  Prediction2["RFPred"]*100/(Data_Cleaned_Test$`Salary`) )
Prediction2["Actual"] =  as.data.frame(Data_Cleaned_Test$`Act Pts`)
Prediction2["Salary"] =  as.data.frame(Data_Cleaned_Test$`Salary`)
Prediction2["Name"] =  as.data.frame(Data_Cleaned_Test$Player)
Prediction2["HTeam"] =  as.data.frame(Data_Cleaned_Test$Team)
Prediction2["Opp"] = as.data.frame(Data_Cleaned_Test$Opp)
Prediction2["Pts"] =  as.data.frame(Data_Cleaned_Test$Pts)
Prediction2["Pos"] =  as.data.frame(Data_Cleaned_Test$Pos)
Prediction2["Xgb"] = as.data.frame(predict(xgbO, testSparseMatrix))
Prediction2["XgbPer"] = as.data.frame(  Prediction2["Xgb"]*100/(Data_Cleaned_Test$`Salary`) )
Prediction2["DNN"] = as.data.frame(h2o.predict(m1,newdata=testDNN))
Prediction2["DNNPer"] = as.data.frame(  Prediction2["DNN"]*100/(Data_Cleaned_Test$`Salary`) )
Results = rbind(Results, Prediction2)
}
Backup = Results
Results[,"ActualPos"] = 0
Results[,"Rank"] = 0
Results[,"L5"] = 0
Results[,"L10"] = 0
Results[,"Player_Per"] = 0
Results[,"Player_Med"] = 0
Results[,"Player_Projected"] = 0
for(each in 1:nrow(Results)){
# Find actual Position
P = subset(Position, Position$PName == as.character(Results[each,"Name"]) )
if (nrow(P) > 0){
Results[each, "ActualPos"] = as.character(P[1,"Pos"])
}
#Find Rank, L5, L10
P = subset(Dvoa, Dvoa$TNShort == as.character(Results[each,"Opp"]) &
Dvoa$Pos == as.character(Results[each,"ActualPos"])  )
if (nrow(P) > 0){
Results[each, "Rank"] = as.numeric(P$Rank)
Results[each, "L5"] = as.numeric(P$L5)
Results[each, "L10"] = as.numeric(P$L10)
}
}
All_17 = subset(All_17, All_17$Date != "11/4/2017")
for(each in 1:nrow(Results)){
######### Split ###
### if Postition was not found then use Position from FL
if ( Results[each, "ActualPos"] == "0"){
positions = ((unlist(strsplit(as.character( Results[each, "Pos"] ), "/"))))
if (length(positions) > 1 ){
sub_T = subset(All_17, All_17$Team == as.character(Results[each, "HTeam"]) )
T1 =  subset( sub_T , grepl(positions[1], sub_T$Pos))
T2 =  subset( sub_T , grepl(positions[2], sub_T$Pos))
T1 = rbind(T1,T2)
T1 = unique(T1)
}
if (length(positions) == 1){
sub_T = subset(All_17, All_17$Team == as.character(Results[each, "HTeam"]) )
T1 =  subset( sub_T , grepl(positions[1], sub_T$Pos))
T1 = unique(T1)
}
}
### if ActualPos is providied as they are starters then you don't need to use FL probable positions
if (Results[each, "ActualPos"] != "0") {
positions = Results[each, "ActualPos"]
sub_T = subset(All_17, All_17$Team == as.character(Results[each, "HTeam"]) )
T1 =  subset( sub_T , grepl(positions[1], sub_T$Pos))
T1 = unique(T1)
}
### Get All players in that position on this team
Player_Points = subset(T1, T1$Player == as.character(Results[each, "Name"])  )
NonPlayer_Points = subset(T1, T1$Player != as.character(Results[each, "Name"]))
### Remove  Starters who have flexible position
if (Results[each, "ActualPos"] != "0"){
playes_NotFound = unique(NonPlayer_Points$Player)
for(each2 in 1:length(playes_NotFound)){
C =  which(Results$Name == as.character(playes_NotFound[each2]) )
if ( length(C) > 0 ) {
if (Results[C,"ActualPos"] != "0" ){
NonPlayer_Points = subset(NonPlayer_Points, NonPlayer_Points$Player != as.character(Results[C, "Name"]))
}
}
}
}
Results[each,"Player_Per"] = sum((Player_Points$`Act Pts`)) / ( sum((Player_Points$`Act Pts`)) + sum((NonPlayer_Points$`Act Pts`)) )
Results[each,"Player_Med"] = median(Player_Points$`Act Pts`)
Results[each,"Player_Projected"] =  Results[each, "L5"] * Results[each,"Player_Per"]
}
write.csv(Results, file = "NBA_Test_v11_4_17.csv")
Results = unique(Results)
Results = unique(Results)
View(Results)
unique(Results$Name)
library(plyr)
NewOffense = read.csv("All_Games_17-18.csv")
NewOffense = subset(NewOffense, NewOffense$G !=0)
NewOffense$MP = as.numeric(gsub(':','.',NewOffense$MP))
NewOffense=unique(NewOffense)
NewOffense[is.na(NewOffense)] = 0
AllTeams = unique(NewOffense$Tm)
OffensiveCumilative =  NewOffense[0,]
# revalue(NewOffense$Tm, c("BRK"="BKN", "CHO"="CHA"))
levels(NewOffense$Tm)[levels(NewOffense$Tm)=="BRK"] <- "BKN"
levels(NewOffense$Tm)[levels(NewOffense$Tm)=="CHO"] <- "CHA"
for (team in 1:length(AllTeams)) {
TestSubPlayer = subset(NewOffense, NewOffense$Tm == AllTeams[team])
TestSubPlayer = subset(TestSubPlayer, TestSubPlayer$G == 1)
OffensiveCumilative =rbind(OffensiveCumilative,
data.frame(Tm = TestSubPlayer[1,c("Tm")],
G. = 1,
FG = sum(TestSubPlayer[,c("FG")]),
FGA = sum(TestSubPlayer[,c("FGA")]),
FG. = sum(TestSubPlayer[,c("FG.")]),
X3P = sum(TestSubPlayer[,c("X3P")]),
X3PA = sum(TestSubPlayer[,c("X3PA")]),
FT = sum(TestSubPlayer[,c("FT")]),
FTA = sum(TestSubPlayer[,c("FTA")]) ,
ORB = sum(TestSubPlayer[,c("ORB")]),
DRB = sum(TestSubPlayer[,c("DRB")]),
TRB = sum(TestSubPlayer[,c("TRB")]),
AST = sum(TestSubPlayer[,c("AST")]),
STL = sum( TestSubPlayer[,c("STL")] ),
BLK = sum( TestSubPlayer[,c("BLK")] ),
TOV = sum(TestSubPlayer[,c("TOV")]),
PF = sum(TestSubPlayer[,c("PF")]),
PTS = sum(TestSubPlayer[,c("PTS")]),
GmSc = sum(TestSubPlayer[,c("GmSc")]),
plusMinus = sum(TestSubPlayer[,c("plusMinus")])
#                          dfsdk = sum(TestSubPlayer[,c("Tgt")])
) )
}
rm(TestSubPlayer)
OffensiveCumilative = NewOffense[0,]
#### Player Progressive####
# OffensiveProgressive = OffensiveCumilative
NewOffense$plusMinus  = 0
AllTeams = unique(NewOffense$Tm)
### Defense
DefensiveProgressiveNew = NewOffense[0,]
for (team in 1:length(AllTeams)) {
TestSubPlayer = subset(NewOffense, NewOffense$Tm == AllTeams[team])
# DefensiveCumilativeSub2 = subset(DefensiveProgressive,DefensiveProgressive$Tm == AllTeams[team])
# DefensiveCumilativeSub2 = DefensiveProgressiveNew[DefensiveProgressiveNew$Tm %in% AllTeams[team], ]
# inital = TestSubPlayer[1,c("G.")]
maxn = max(TestSubPlayer$G)
for ( games in 1:maxn ) {
TestSubPlayer = subset(TestSubPlayer, TestSubPlayer$G < games+1)
Date = TestSubPlayer$Date[TestSubPlayer$G == games][1]
# DefensiveCumilativeSub2 = subset(DefensiveCumilativeSub2, DefensiveCumilativeSub2$G. == games-1)
#
# if (nrow(DefensiveCumilativeSub2) == 0){
#   DefensiveCumilativeSub2[1,] = 0
#   Tm1 = TestSubPlayer[1,c("Tm")]
# }
#
# if (nrow(DefensiveCumilativeSub2) != 0){
#   Tm1 = DefensiveCumilativeSub2[1,c("Tm")]
# }
DefensiveProgressiveNew =  rbind(DefensiveProgressiveNew,
data.frame(Tm = as.character(TestSubPlayer[1,c("Tm")]),
Date = as.character(Date),
G. = games,
FG = sum(TestSubPlayer[,c("FG")]) ,
FGA = sum(TestSubPlayer[,c("FGA")]),
FG. = sum(TestSubPlayer[,c("FG.")]),
X3P = sum(TestSubPlayer[,c("X3P")]),
X3PA = sum(TestSubPlayer[,c("X3PA")]),
FT = sum(TestSubPlayer[,c("FT")]),
FTA = sum(TestSubPlayer[,c("FTA")]),
ORB = sum(TestSubPlayer[,c("ORB")]),
DRB = sum(TestSubPlayer[,c("DRB")]),
TRB = sum(TestSubPlayer[,c("TRB")]),
AST = sum(TestSubPlayer[,c("AST")]),
STL = sum( TestSubPlayer[,c("STL")] ),
BLK = sum( TestSubPlayer[,c("BLK")] ),
TOV = sum(TestSubPlayer[,c("TOV")]),
PF = sum(TestSubPlayer[,c("PF")]),
PTS = sum(TestSubPlayer[,c("PTS")]),
GmSc = sum(TestSubPlayer[,c("GmSc")]),
plusMinus = sum(TestSubPlayer[,c("plusMinus")])
)
)
# DefensiveCumilativeSub2 = DefensiveProgressiveNew[DefensiveProgressiveNew$Tm %in% AllTeams[team], ]
TestSubPlayer = subset(NewOffense, NewOffense$Tm == AllTeams[team])
}
}
rm(OffensiveCumilative)
View(DefensiveProgressiveNew)
